{
  

    "posts-cau-hinh-emacs-de-lap-trinh-c-html": {
      "title": "Cấu hình Emacs để lập trình C",
      "content"	 : "Link hướng dẫn cài đặt và sử dụng các chức năng: http://tuhdo.github.io/c-ide.htmlSau đây là vài thứ cơ bản ko cần đọc cái bên trên cài và dùng luôn đã »Anh em thực hiện cài đặt:Mở Terminal, gõ lệnh:git clone https://github.com/tuhdo/emacs-c-ide-demo.git ~/.emacs.dNếu hiện thông báo đã tồn tại thư mục ` ~/.emacs.d` (thư mục cấu hình của emacs) thì ae gõ lệnh sau để xóa nó (có thể gần nhập pass su); và gõ lại lệnh trên.sudo rm -r ~/.emacs.dVậy là mở Emacs lên sử dụng thôi (Lưu ý là lần đầu mở lại nó phải cài đặt một số thứ nên chịu khó chờ chút. Những lần sau sẽ nhanh hơn) »emacs&amp;amp;Vừa mở lên C-x C-f tạo file mới (file mã nguồn ngôn ngữ C có đuôi .c nhé), ae thấy ngay cái file browser ngon hơn cái mặc định rồi.Khi biên dịch ấn F5 là ok thôi. Nhưng đợi chút. Khi biên dịch ta phải viết cái Makefile – file cấu hình biên dịch và thực thi của dự án. Cái này không phải đồ thừa mà hầu hết các dự án C thực tế đều cần nhé.2. Viết Makefile, biên dịch, chạy:Tạo 1 file có tên ‘Makefile’ cùng thư mục với file mã nguồn. Cái này chứa các lệnh biên dịch và thực thi để ae không phải gõ lại mỗi lúc cần dịch và chạy chương trình nhé.Nội dung Makefile cơ bản nhất cho biên dịch C:build:gcc -o hello hello.crun:./helloThay hết hello thành tên file mã nguồn tương ứng nhé.Nếu ae muốn ấn F5 vừa biên dịch xong chạy luôn chương trình trong cửa sổ emacs như hình dưới thì sử dụng Makefile như sau (thay tên hello &amp;gt; tên file nguồn của bạn):build:gcc -o hello hello.c &amp;amp;&amp;amp; ./hellorun:./helloBonus thêm nội dung chương trình mẫu V.A sử dụng:#include &amp;lt;stdio.h&amp;gt;int main(){printf(&quot;Hello Viet Anh&quot;);}Trên đây là cơ bản cấu hình Emacs cho người mới bắt đầu. Đọc thêm các chức năng khác của bộ cấu hình chúng ta vừa sử dụng tại đây nhé: http://tuhdo.github.io/c-ide.htmlTìm hiểu thêm về Makefile: https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makeassets/images.html",
      "url": " http://localhost:4000//posts/cau-hinh-emacs-de-lap-trinh-c.html",
      "categories": "Ngôn ngữ C, Emacs"
    }
    ,
  

    "posts-cau-truc-re-nhanh-html": {
      "title": "Cấu trúc rẽ nhánh trong C",
      "content"	 : "Cấu trúc rẽ nhánh trong mỗi ngôn ngữ lập trình luôn luôn là một thành phần quan trọng. Đó là thành phần cơ bản tạo nên hầu hết các thuật toán hiện đại. Nếu bạn muốn mô tả một đoạn chương trình kiểu như: Nếu gặp điều kiện C thì thực hiện hành động A, ngược lại, thực hiện hành động B thì bạn chắc chắn cần sử dụng cấu trúc rẽ nhánh.1. Cấu trúc rẽ nhánh dạng if…else (nếu… thì…)* Dạng đơn giản nhất: if (&amp;lt;điều kiện&amp;gt;) &amp;lt;hành động&amp;gt; /* Nếu &amp;lt;điều kiện&amp;gt; đúng thì thực hiện &amp;lt;hành động&amp;gt;&amp;lt;hành động&amp;gt; thông thường là một khối lệnh, được đặt trong cặp dấu { } */Chương trình ví dụ:#include &amp;lt;stdio.h&amp;gt;int main(){int a = 5;if (a &amp;gt; 0) {printf(&quot;%d la so duongn&quot;,a);}if (a &amp;lt; 0) {printf(&quot;%d la so amn&quot;,a);printf(&quot;a nho hon 0&quot;);}return 0;}* Dạng mở rộng if…else:if (&amp;lt;điều kiện&amp;gt;)&amp;lt;hành động 1&amp;gt;else&amp;lt;hành động 2&amp;gt;/* Nếu &amp;lt;điều kiện&amp;gt; đúng thì thực hiện &amp;lt;hành động 1&amp;gt; ; nếu &amp;lt;điều kiện&amp;gt; sai thì thực hiện &amp;lt;hành động 2&amp;gt;*/Chương trình ví dụ:#include &amp;lt;stdio.h&amp;gt;int main() {int a = -5;if (a &amp;gt; 0)printf(&quot;%d &amp;gt; 0n&quot;,a);else {printf(&quot;%d &amp;gt;= 0n&quot;, a);printf(&quot;%d khong la so duongn&quot;,a);}return 0;}* Dạng mở rộng if…else if…else:if (&amp;lt;điều kiện 1&amp;gt;)&amp;lt;hành động 1&amp;gt;else if (&amp;lt;điều kiện 2&amp;gt;)&amp;lt;hành động 2&amp;gt;else&amp;lt;hành động 3&amp;gt;/* Nếu &amp;lt;điều kiện 1&amp;gt; đúng thì thực hiện &amp;lt;hành động 1&amp;gt; ; nếu &amp;lt;điều kiện 1&amp;gt; sai -&amp;gt; tiến hành kiểm tra &amp;lt;điều kiện 2&amp;gt;: &amp;lt;điều kiện 2&amp;gt; đúng sẽ thực hiện &amp;lt;hành động 2&amp;gt;; nếu  &amp;lt;điều kiện 1&amp;gt; và &amp;lt;điều kiện 2&amp;gt; đều sai thì thực hiện &amp;lt;hành động 3&amp;gt; */Chương trình ví dụ:#include &amp;lt;stdio.h&amp;gt;int main() {int a = 5;printf(&quot;Nhap so nguyen a: &quot;);scanf(&quot;%d&quot;,&amp;amp;a);if (a &amp;gt; 0)printf(&quot;a la so duongn&quot;);else if (a &amp;lt; 0)printf(&quot;a la so amn&quot;);elsef(&quot;a = 0&quot;);return 0;}Các bạn chạy đoạn chương trình với các giá trị a khác nhau xem sao nhé.2. Cấu trúc rẽ nhánh switch caseCú pháp:switch (&amp;lt;biểu thức nguyên&amp;gt;) {case &amp;lt;giá trị 1&amp;gt;: &amp;lt;hành động 1&amp;gt;; break; /* có thể không có câu lệnh này*/case &amp;lt;giá trị 2&amp;gt;: &amp;lt;hành động 1&amp;gt;; break; /* có thể không có câu lệnh này*/....default: &amp;lt;hành động mặc định&amp;gt;; break; /* có thể không có câu lệnh này*/}• Khi một cấu trúc rẽ nhánh switch được thực thi, chương trình sẽ tính toán giá trị của biểu thức. Kết quả thu được phải là kiểu nguyên (ta có thể ép kiểu cho nó. Xem Toán tử trong C để biết cách ép kiểu). Tiếp đó nó so sánh kết quả thu được với các giá trị 1,2… , khi tìm thấy một giá trị bằng với kết quả thu được ở trên, nó thực hiện cách lệnh từ sau dấu : tương ứng cho tới cuối cấu trúc switch hoặc tới khi bắt gặp lệnh break; • Trường hợp không tìm thấy giá trị nào bằng với giá trị biểu thức,  được thực hiện.Ví dụ về chương trình in ra cách đọc của một chữ số: (từ 0 -&amp;gt; 9)#include &amp;lt; stdio.h &amp;gt;int main() {int chuSo;printf(&quot;Nhap chu so: &quot;);scanf(&quot;%d&quot;, &amp;amp; chuSo);switch (chuSo) {case 0:printf(&quot;Khong&quot;);break;case 1:printf(&quot;Mot&quot;);break;case 2:printf(&quot;Hai&quot;);break;case 3:printf(&quot;Ba&quot;);break;case 4:printf(&quot;Bon&quot;);break;case 5:printf(&quot;Nam&quot;);break;case 6:printf(&quot;Sau&quot;);break;case 7:printf(&quot;Bay&quot;);break;case 8:printf(&quot;Tam&quot;);break;case 9:printf(&quot;Chin&quot;);break;default:printf(&quot;Khong phai chu so!&quot;);}return 0;}",
      "url": " http://localhost:4000//posts/cau-truc-re-nhanh.html",
      "categories": "Ngôn ngữ C"
    }
    ,
  

    "posts-toan-tu-trong-c-html": {
      "title": "Toán tử trong C",
      "content"	 : "Định nghĩa toán tử trong [Wikipedia]:  Trong toán học, một toán tử (tiếng Anh operator, phân biệt với operation - phép toán) là một hàm, thông thường có một vai trò quan trọng trong một lĩnh vực nào đấy. Chẳng hạn trong đại số tuyến tính có “toán tử tuyến tính” (linear operator). Trong giải tích có “toán tử vi phân” (differential operator)… Thông thường, một “toán tử” là một hàm tác động lên các hàm khác; hoặc nó có thể là tổng quát hóa của một hàm, như trong đại số tuyến tính.Các kiểu toán tử trong C:  Toán tử số học  Toán tử quan hệ  Toán tử logic  Toán tử so sánh bit  Toán tử gán  Toán tử hỗn hợpToán tử số học:Giả sử khai báo: int A=5, B=6; float C=1.2;            Toán tử      Miêu tả      Ví dụ                  +      Cộng 2 toán hạng      A + B sẽ cho kết quả là 11              -      Trừ 2 toán hạng      A - B sẽ cho kết quả là -1              *      Nhân 2 toán hạng      A * B sẽ cho kết quả là 30              /      Chia 2 toán hạng      B / A sẽ cho kết quả là 0 (2 toán hạng đều là số nguyên  thì kết quả là phần nguyên của thương) A / C sẽ cho kết quả là 4.166667 (1 trong 2 toán hạng là số thực dấu phẩy động thì thương là số thực dấu phẩy động)              %      Chia lấy phần dư      B % A sẽ cho kết quả là 5      Toán tử so sánh(quan hệ): Trả về giá trị là true (đúng) hoặc false (sai)int A=5, B=6;  &amp;lt; (nhỏ hơn)      A &amp;lt; B -&amp;gt; true  &amp;lt;= (nhỏ hơn hoặc bằng)      A &amp;lt;= B -&amp;gt; true  &amp;gt; (lớn hơn)      A &amp;gt; B -&amp;gt; false  &amp;gt;= (lớn hơn hoặc bằng)      A &amp;gt;= B -&amp;gt; false  == (bằng)      A == B  -&amp;gt; false  != (khác)      A != B -&amp;gt; trueToán tử logic: Trả về giá trị là true (đúng) hoặc false (sai)Trong ngôn ngữ C, 2 trạng thái true(đúng) và false(sai) được biểu diễn bởi các số nguyên int:  Số 0 biểu diễn cho trạng thái false (sai).  Tất cả các số nguyên khác 0 biểu diễn cho trạng thái true (đúng).Các toán tử logic:  &amp;amp;&amp;amp; (and)   trả về true khi cả 2 toán hạng đều đúng. Ngược lại trả về false.          (5&amp;lt;6) &amp;amp;&amp;amp; (7&amp;lt;8)  -&amp;gt;  true      (5&amp;gt;6) &amp;amp;&amp;amp; (7&amp;lt;8)  -&amp;gt;  false      (5&amp;gt;6) &amp;amp;&amp;amp; (7&amp;gt;8)  -&amp;gt;  false        || (or)  trả về true khi ít nhất một trong 2 toán hạng đúng. Ngược lại trả về false.          (5&amp;lt;6) &amp;amp;&amp;amp; (7&amp;lt;8)  -&amp;gt;  true      (5&amp;gt;6) &amp;amp;&amp;amp; (7&amp;lt;8)  -&amp;gt;  true      (5&amp;gt;6) &amp;amp;&amp;amp; (7&amp;gt;8)  -&amp;gt;  false        ! (not) trả về true khi toán hạng (đằng sau dấu ! sai). Ngược lại trả về false.          !(7&amp;gt;8)  -&amp;gt;  true      !(7&amp;lt;8)  -&amp;gt;  false      Toán tử thao tác trên bit:  &amp;amp; (and bit)  | (or bit)  ~ (phủ định)  &amp;gt;&amp;gt; (dịch bit sang phải)  &amp;lt;&amp;lt; (dịch bit sang trái)Toán tử gánSử dụng dấu = cho việc gán giá trị vào biến.Ví dụ:int a,b,c;int main(void){a = 5; // Gán cho a giá trị là 5c = b = a; // Gán cho b và c giá trị bằng giá trị của areturn 0;}Các toán tử gán mở rộng:            Toán tử      Ví dụ      Tương đương với                  +=      C += A      C = C + A              -=      C -= A      C = C - A              *=      C *= A      C = C * A              /=      C /= A      C = C / A              %=      C %= A      C = C % A              &amp;lt;&amp;lt;=      C &amp;lt;&amp;lt;= 2      C = C &amp;lt;&amp;lt; 2              &amp;gt;&amp;gt;=      C &amp;gt;&amp;gt;= 2      C = C &amp;gt;&amp;gt; 2              &amp;amp;=      C &amp;amp;= 2      C = C &amp;amp; 2              ^=      C ^= 2      C = C ^ 2              |=      C |= 2      C = C | 2      Toán tử tăng giảm  ++ là toán tử tăng          ++i tương đương với i = i + 1        -- là toán tử giảm          --i tương đương với i = i - 1        Có 2 cách viết ++i và i++ nhưng ý nghĩa của chúng khác nhau:          ++i thì i được tăng trước sau đó sẽ lấy kết quả để thực hiện biểu thức      i++ thì i được đưa vào thực hiện biểu thức trước sau đó mới tăng i lên.      Một số toán tử khác            Toán tử      Miêu tả      Ví dụ                  sizeof()      Trả lại kích cỡ của một biến      sizeof(a), với a là integer, thì sẽ trả lại kết quả là 4.              &amp;amp;      Trả lại địa chỉ của một biến.      &amp;amp;a sẽ cho địa chỉ thực sự của biến a.              *      Trỏ tới một biến.      *a sẽ trỏ tới biến a.              &amp;lt;điều kiện&amp;gt;? X:Y      Biểu thức điều kiện      Nếu điều kiện đúng ? thì trả về giá trị X : Nếu không thì trả về giá trị Y              &amp;lt;toán hạng 1&amp;gt;,&amp;lt;toán hạng 2&amp;gt;      Ước lượng giá trị toán hạng 1, ước lượng giá trị toán hạng 2 và trả về giá trị toán hạng 2 là giá trị cuối cùng      t = (x=10, x+5) sẽ gán giá trị x &amp;lt;- 10; thực hiện phép tính x + 5 = 10 + 5 = 15 và gán giá trị 15 cho t      Bảng thứ tự ưu tiên thực hiện của toán tử (theo thứ tự giảm dần mức độ ưu tiên):            Loại      Toán tử      Thứ tự ưu tiên                  Postfix      () [] -&amp;gt; . ++ - -      Trái sang phải              Unary      + - ! ~ ++ - - (type) * &amp;amp; sizeof      Phải sang trái              Tính nhân      * / %      Trái sang phải              Tính cộng      + -      Trái sang phải              Dịch chuyển bit      &amp;lt;&amp;lt; &amp;gt;&amp;gt;      Trái sang phải              So sánh không ngang bằng      &amp;lt; &amp;lt;= &amp;gt; &amp;gt;=      Trái sang phải              So sánh ngang bằng      == !=      Trái sang phải              Phép AND bit      &amp;amp;      Trái sang phải              Phép XOR bit      ^      Trái sang phải              Phép OR bit      |      Trái sang phải              Phép AND logic      &amp;amp;&amp;amp;      Trái sang phải              Phép OR logic      ||      Trái sang phải              Điều kiện      ? :      Phải sang trái              Gán      = += -= *= = %= &amp;gt;&amp;gt;= &amp;lt;&amp;lt;= &amp;amp;= ^= |=      Phải sang trái              Dấu phảy      ,      Trái sang phải      Ép kiểu:Đôi khi chúng ta cần chuyển đổi giá trị một biểu thức sang kiểu dữ liệu khác. Ví dụ trong trường hợp ta muốn thực hiện phép toán chia lấy phần dư của 2 số nguyên, nhưng lại được lưu trong 2 biến kiểu float, ta không thể áp dụng trực tiếp toán tử % cho 2 biến đó. Bạn chạy chương trình thế này sẽ báo lỗi:#include &amp;lt;stdio.h&amp;gt;int main(void){int a = 5, c;float b = 6;c = a % (int)b;printf(&quot;%d&quot;, c);return 0;}Vì thế cần ép kiểu theo cú pháp: (&amp;lt;kiểu dữ liệu&amp;gt;) &amp;lt;biểu thức&amp;gt; để lấy giá trị từ biến b, đổi sang số nguyên để thực hiện phép %. Code đúng như sau:#include &amp;lt;stdio.h&amp;gt;int main(void){ int a = 5, c;float b = 6; c = a % (int)b; printf(&quot;%d&quot;, c); return 0; } ",
      "url": " http://localhost:4000//posts/toan-tu-trong-c.html",
      "categories": "Ngôn ngữ C"
    }
    ,
  

    "posts-bien-hang-va-nhap-xuat-du-lieu-trong-c-html": {
      "title": "Biến, hằng và nhập xuất dữ liệu trong C",
      "content"	 : "1. Biến, hằng:  Biến, hằng giống như những chiếc hộp có tên riêng mà chúng ta có thể để dữ liệu vào và mang ra mỗi khi chúng ta cần sử dụng. Biến khác hằng ở chỗ giá trị lưu trữ trong biến có thể thay đổi trong quá trình thực hiện chương trình; còn giá thị của hằng thì được định nghĩa ngay từ đầu chương trình, không thay đổi trong suốt quá trình thực hiện chương trình.Các quy tắc đặt tên biến, hằng:Tên biến, tên hằng:  Chỉ chứa các chữ cái, chữ số và kí tự gạch dưới ( _ ) trong bảng mã ASCII.  Phải bắt đầu bằng một chữ cái hoặc kí tự gạch dưới.  Không được trùng với các từ khóa trong ngôn ngữ C.  Phân biệt hoa thường. C là ngôn ngữ phân biệt hoa thường, do vậy biến aBc và abc là khác nhau trong C.Danh sách các từ khóa trong ngôn ngữ C:            break      enum      register      typedef              case      extern      return      union              char      float      short      unsigned              const      for      signed      void              continue      goto      sizeof      volatile              default      if      static      while              do      int      struct      _Packed              double                           Ví dụ:  Tên đúng: abc, Abc, abc123, _abc  Tên sai: 1abc (tên sai do bắt đầu bằng số), b@c (tên sai do chứa kí tự @ không được phép), case (tên sai do trùng với từ khóa).Khai báo biến:Vị trí khai báo: Biến thường được khai báo ở đầu chương trình, đầu hàm hoặc khối lệnh.Có 2 loại biến theo vị trí khai báo:  Biến toàn cục: biến khai báo ở ngoài các hàm, các khối lệnh. Chu trình sống của chúng từ lúc bắt đầu chương trình tới khi kết thúc chương trình.  Biến cục bộ: biến khai báo bên trong các hàm, các khối lệnh. Chu trình sống từ khi bắt đầu khối lệnh tới khi khối lệnh được thực hiện xong.Cú pháp khai báo biến: &amp;lt;kiểu dữ liệu&amp;gt; &amp;lt;danh sách biến&amp;gt;;(Biến trong ngôn ngữ C luôn gắn liền với một kiểu dữ liệu).Ví dụ:int i,j; /* Khai báo biến i,j kiểu số nguyên */char ch; /* Khai báo biến ch kiểu chữ cái ASCII */char name[100]; /* Khai báo xâu kí tự tên name với độ dài lớn nhất là 100 kí tự */ i = j = 0; /* Gán giá trị 0 cho 2 biến i,j */ch = &#39;A&#39;; /* Gán giá trị chữ cái A in hoa cho biến ch */Khai báo hằng:Khai báo hằng thực hiện ở đầu chương trình.Cách 1: Sử dụng bộ tiền xử lí:#define &amp;lt;tên hằng&amp;gt; &amp;lt;giá trị của hằng&amp;gt;;Cách 2:const &amp;lt;kiểu dữ liệu&amp;gt; &amp;lt;tên hằng&amp;gt; = &amp;lt;giá trị của hằng&amp;gt;;Trên thực tế tên hằng thường được viết in hoa.Phân chia các kiểu giá trị trong ngôn ngữ C:            STT      Kiểu và miêu tả                  1      **Kiểu cơ bản:  **Là các kiểu dữ liệu số học và bao gồm 2 kiểu chính: a) kiểu số nguyên và b) kiểu số thực dấu chấm động.              2      **Kiểu liệt kê:  **Đây là các kiểu số học và được dùng để định nghĩa các biến mà nó có thể được gán trước một số lượng nhất định giá trị số nguyên qua suốt chương trình.              3      **Kiểu void:  **Kiểu định danh *void* là kiểu đặc biệt thể hiện rằng không có giá trị nào.              4      **Kiểu phát triển từ cơ bản:  **Bao gồm các kiểu : a) con trỏ, b) kiểu mảng, c) kiểu cấu trúc, d) kiểu union và e) kiểu function (hàm).      Bảng các kiểu nguyên:            Kiểu      Kích thước biến      Khoảng giá trị                  char      1 byte      -128 tới 127 hoặc 0 tới 255              unsigned char      1 byte      0 tới 255              signed char      1 byte      -128 tới 127              int      2 hoặc 4 bytes      -32,768 tới 32,767 hoặc -2,147,483,648 tới 2,147,483,647              unsigned int      2 hoặc 4 bytes      0 tới 65,535 hoặc 0 tới 4,294,967,295              short      2 bytes      -32,768 tới 32,767              unsigned short      2 bytes      0 tới 65,535              long      4 bytes      -2,147,483,648 tới 2,147,483,647              unsigned long      4 bytes      0 tới 4,294,967,295      Bảng các kiểu số thực dấu phẩy động:            Kiểu      Kích thước biến      Khoảng giá trị      Độ chính xác                  float      4 byte      1.2E-38 tới 3.4E+38      6 vị trí thập phân              double      8 byte      2.3E-308 tới 1.7E+308      15 vị trí thập phân              long double      10 byte      3.4E-4932 tới 1.1E+4932      19 vị trí thập phân      Một số kí tự điều khiển:  n : Xuống dòng  t : Tab ngang (tạo khoảng trắng giống như khi bạn ấn phím Tab trên bàn phím trong soạn thảo văn bản)  r : Nhảy về đầu hàng  a : Kêu Bip   : In ra dấu   ” : In ra dấu “  ’ : In ra dấu ‘  %% : In ra dấu %2. Nhập xuất dữ liệu trong C:Để nhập xuất cơ bản trong C, ta sử dụng 2 hàm tiêu chuẩn, được định nghĩa trong thư viện &amp;lt;stdio.h&amp;gt;.  Hàm printf() để in ra thiết bị xuất tiêu chuẩn (màn hình).  Hàm scanf() để nhận giá trị từ thiết bị nhập tiêu chuẩn (bàn phím) và lưu vào các biến.Ví dụ về chương trinh nhập một số và in ra số vừa nhập:#include &amp;lt;stdio.h&amp;gt;;int main() {float x;printf(&quot;blog.vietanhdev.comn&quot;);printf(&quot;Nhap vao mot so: &quot;);scanf(&quot;%f&quot;,&amp;amp;x);printf(&quot;So ban vua nhap la: %f&quot;, x);return 0;}a) In dữ liệu ra màn hình:Cú pháp: printf(“xâu kí tự…”, &amp;lt;các biến và các số&amp;gt;);Việc sử dụng đơn giản nhất là in ra một xâu kí tự: “Xin chao cac ban!”:printf(&quot;Xin chao cac ban!&quot;);Vậy bạn muốn in một biến chứa dữ liệu ra màn hinh thì sao?Ví dụ về in biến chứa 1 số nguyên ra màn hình:int number = 12;printf (&quot;So duoc in ra: %d&quot;,number);Để in giá trị của các biến, số ra màn hình, ta phải sử dụng các đặc tả định dạng bắt đầu với % như trên nhằm đại diện cho các biến, số (%d đại diện cho biến số nguyên number).  Các đặc tả định dạng này không được in ra màn hình mà được thay thế bởi các biến, các số đằng sau.Một số đặc tả định dạng cơ bản:  %d: số nguyên hệ 10 có dấu  %u: số nguyên hệ 10 không dấu  %x: số nguyên hệ 16  %o: số nguyên hệ bát phân  %s: xâu kí tự  %c: một kí tự đơn  %f: số chấm động cố định  %e: số chấm động (ký hiệu có số mũ)  l : Tiền tố dùng kèm với %d, %x, %o để chỉ số nguyên dài (ví dụ %ld)Chú ý:  Ta có thể sử dụng đặc tả định dạng để in dữ liệu sang kiểu khác:          Ví dụ:      char ch = &quot;A&quot;;printf (&quot;%dn&quot;, ch); /* In ra 65 */printf (&quot;%cn&quot;, ch); /* In ra A */  Để in ra kí tự % ta dùng %%.Định dạng dữ liệu in ra:% [-] [fwidth] [.p] trong đó: • [fwidth] chiều rộng • [-] căn lề trái • [.p] số kí tự được in raVí dụ:            ** Giá trị**      Đặc tả định dạng      Kết quả                  42      %6d      42              42      %-6d      42              ‘z’      %3c      z              2.71828      %10.2f      2.71              “printf”      %10s      printf      b) Nhập dữ liệu từ bàn phím:Cú pháp: scanf (“xâu kí tự…”, &amp;lt;các con trỏ&amp;gt;);Ví dụ ta muốn nhập một số nguyên vào biến a:int a; scanf(&quot;%d&quot;, &amp;amp;a);Lưu ý:ở đây &amp;amp;a là con trỏ trỏ tới biến a.Chú ý khi nhập xâu kí tự chứa dấu cách (space):Trước khi đọc xâu, chúng ta phải làm sạch bộ đệm bàn phím vì có thể quá trình đọc dữ liệu trước còn lưu lại. Trên Windows chúng ta có lệnh fflush(stdin); , tuy nhiên nó đã bộc lộ khá nhiều hạn chế, nhất là không thể dùng trên Linux nên tôi không sử dụng ở đây. Chúng ta sẽ dùng đoạn lệnh sau trước lệnh nhập vào một chuỗi:int c;while ( ( c = getchar() ) != EOF &amp;amp;&amp;amp; c != &#39;n&#39; );Hoặcscanf ( &quot;%*[^n]&quot; );scanf ( &quot;%*c&quot; );Cách 1: Ta dùng lệnh:fgets (name, 100, stdin);với 100 là độ dài lớn nhất của xâu kí tự bạn muốn nhập vào (bạn có thể thay đổi nó) và name là tên biến xâu kí tự. Việc đọc này sẽ lưu vào biến name cả kí tự xuống dòng ở cuối xâu (khi bạn ấn enter để kết thúc nhập xâu là truyền vào bộ đệm kí tự xuống dòng).Cách 2: Ta dùng lệnh:scanf (&quot;%[^n]%*c&quot;, name);với name cũng là tên biến xâu kí tự. Đọc cách này sẽ loại bỏ kí tự xuống dòng ở cuối xâu.",
      "url": " http://localhost:4000//posts/bien-hang-va-nhap-xuat-du-lieu-trong-c.html",
      "categories": "Ngôn ngữ C"
    }
    ,
  

    "posts-cau-truc-chuong-trinh-c-co-ban-html": {
      "title": "Cấu trúc chương trình C cơ bản",
      "content"	 : "Các thành phần của một chương trình C cơ bản bao gồm:  Các lệnh tiền xử lí  Các hàm  Các biến  Các lệnh và biểu thức  Các comment (ghi chú về code giúp ích cho công tác bảo trì và nâng cấp)Chúng ta hãy cùng nghiên cứu chương trình Hello World – Chào thế giới trong ngôn ngữ C. Chương trình này có chức năng in dòng chữ “Hello World!” lên màn hình máy tính. Tên thành phần của chương trình đã được tôi comment bên cạnh mỗi dòng code (sử dụng cặp dấu /* */). Bạn cũng có thể sử dụng cặp // để đánh dấu phần sau đó cho tới cuối dòng code là comment.Mã nguồn:#include &amp;lt;stdio.h&amp;gt;/* Đây là lệnh tiền xử lí, thông báo cho trình biên dịch biếtchương trình của chúng ta sử dụng thư viện stdio.h */int main() {  //Hàm main - nơi chương trình C bắt đầu thực thiprintf(&quot;Hello World! n&quot;);  //Câu lệnh in ra dòng chữ Hello World!return 0; //Giá trị trả về của hàm}Các bạn hãy Copy toàn bộ các dòng code trên, paste vào Geany và lưu lại dưới tên hello.c nhé. (file mã nguồn chương trình ngôn ngữ C có đuôi .c ).Tiếp đó chọn menu Build &amp;gt; Build (F9) để biên dịch. Và Build &amp;gt; Excute (F5) để chạy chương trình đã biên dịch nhé.",
      "url": " http://localhost:4000//posts/cau-truc-chuong-trinh-c-co-ban.html",
      "categories": "Ngôn ngữ C"
    }
    ,
  

    "posts-cai-dat-geany-gcc-bien-dich-c-tren-linux-ubuntu-html": {
      "title": "Cài đặt Geany – gcc làm môi trường soạn thảo và biên dịch ngôn ngữ C trên Ubuntu",
      "content"	 : "Trong bài viết này Việt Anh sẽ hướng dẫn các bạn cài Geany và gcc  để soạn thảo và biên dịch chương trình viết bằng ngôn ngữ C trên Linux (cụ thể ở đây là hệ điều hành Ubuntu).1.Trước hết bạn phải tải và cài đặt Geany:Mở Terminal (Ctrl + Alt +t) và gõ lần lượt các lệnh sau để cài đặt trình soạn thảo mã nguồn Geany:sudo apt-get updatesudo apt-get install geany2.Tiếp đó cài đặt gcc để biên dịch ngôn ngữ c:Gõ lệnh sau để cài đặt gói build-essential:sudo apt-get install build-essential3.Sử dụng Geany để soạn thảo mã nguồn và biên dịch code C:Tất cả bạn cần làm là ấn F9 để biên dịch chương trình. Và F5 để chạy chương trình nếu biên dịch thành công.",
      "url": " http://localhost:4000//posts/cai-dat-geany-gcc-bien-dich-c-tren-linux-ubuntu.html",
      "categories": "Ngôn ngữ C"
    }
    ,
  

    "posts-thiet-lap-sublime-text-3-de-bien-dich-va-chay-ngon-ngu-c-html": {
      "title": "Thiết lập Sublime Text 3 để biên dịch và chạy ngôn ngữ C",
      "content"	 : "1. Trước hết bạn phải tải và cài đặt Sublime Text 3:Xem hướng dẫn cài đặt Sublime text 3.2. Tiếp đó cài đặt gcc để biên dịch ngôn ngữ c:Mở Terminal (Ctrl + Alt +t) và gõ lần lượt các lệnh sau để cài đặt gói build-essential:sudo apt-get updatesudo apt-get install build-essential3. Cấu hình Build system cho Sublime Text để biên dịch và chạy C:Mở Sublime Text 3, chọn menu Tools &amp;gt; Build System &amp;gt; New Build System…Chèn đoạn mã sau và lưu lại dưới tên GCC.sublime-build{&quot;shell_cmd&quot; : &quot;gcc $file_name -o ${file_base_name}&quot;,&quot;working_dir&quot; : &quot;$file_path&quot;,&quot;variants&quot;:  [    {      &quot;name&quot;: &quot;Run&quot;,      &quot;shell_cmd&quot;: &quot;gcc $file_name -o ${file_base_name} &amp;amp;amp;&amp;amp;amp; ${file_path}/${file_base_name}&quot;    }  ]}",
      "url": " http://localhost:4000//posts/thiet-lap-sublime-text-3-de-bien-dich-va-chay-ngon-ngu-c.html",
      "categories": "Ngôn ngữ C, Sublime Text"
    }
    ,
  

    "posts-gioi-thieu-serie-hoc-lap-trinh-c-html": {
      "title": "Giới thiệu serie học lập trình C",
      "content"	 : "Giới thiệu về ngôn ngữ C từ Wikipedia:  Ngôn ngữ lập trình C là một ngôn ngữ mệnh lệnh được phát triển từ đầu thập niên 1970 bởi Dennis Ritchie để dùng trong hệ điều hành UNIX. Từ đó, ngôn ngữ này đã lan rộng ra nhiều hệ điều hành khác và trở thành một những ngôn ngữ phổ dụng nhất. C là ngôn ngữ rất có hiệu quả và được ưa chuộng nhất để viết các phần mềm hệ thống, mặc dù nó cũng được dùng cho việc viết các ứng dụng. Ngoài ra, C cũng thường được dùng làm phương tiện giảng dạy trong khoa học máy tính mặc dù ngôn ngữ này không được thiết kế dành cho người nhập môn.Ngôn ngữ C  đang được giảng dạy rất rộng rãi trong các trường đại học ở Việt Nam hiện nay và là ngôn ngữ được nhiều người lựa chọn như ngôn ngữ đầu tiên họ học. Trong serie này Việt Anh muốn giới thiệu cho các bạn cơ bản về ngôn ngữ lập trình C, cách viết một số chương trình đơn giản bằng ngôn ngữ C.Tôi sẽ sử dụng chương trình Geany trên hệ điều hành Ubuntu làm trình soạn thảo mã nguồn, gcc làm trình biên dịch ngôn ngữ C. Nếu mới làm quen với ngôn ngữ C và đang sử dụng hệ điều hành Windows, bạn có thể sử dụng Dev-C++ làm trình soạn thảo mã nguồn.Chú ý cách học lập trình C trong serie này:  Các bạn tích cực chạy lại các code mẫu ở mỗi ví dụ bằng cách copy, paste vào trình soạn thảo code và biên dịch, chạy chương trình. Điều đó sẽ giúp bạn hiểu rõ ví dụ hơn.  Thực hành thật nhiều. Dĩ nhiên rồi, cách tốt nhất để học lập trình là thực hành. Bạn hãy làm tất cả các bài tập bạn sưu tập được, có thể nghĩ ra thêm các thử thách cho bản thân với các bài toán phức tạp thêm, mở rộng thêm từ các bài tập đó.  Nếu bạn có thắc mắc gì, hãy tập sử dụng Google như một công cụ hỗ trợ đắc lực. Lập trình viên giỏi luôn biết tìm kiếm sự giúp đỡ từ thế giới online mà 😀 . Tôi cũng sẽ luôn sẵn sàng giúp đỡ nếu bạn gặp khó khăn. Hãy vào trang Liên hệ của blog này để tìm tôi nhé.",
      "url": " http://localhost:4000//posts/gioi-thieu-serie-hoc-lap-trinh-c.html",
      "categories": "Ngôn ngữ C"
    }
    
  
}
